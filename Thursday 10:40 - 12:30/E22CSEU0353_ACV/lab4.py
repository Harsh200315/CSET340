# -*- coding: utf-8 -*-
"""lab4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EfaqjlCccWhX7rW3lEcBxN6FO9IrTFoR
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow  # For displaying images in Colab

# Load the color image
image = cv2.imread('/content/11.jpg')
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# Convert to grayscale
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Compute histogram for grayscale image
hist_gray = cv2.calcHist([gray_image], [0], None, [256], [0, 256])

# Compute histogram for each color channel
channels = ('b', 'g', 'r')
hist_colors = [cv2.calcHist([image], [i], None, [256], [0, 256]) for i in range(3)]

# Compute normalized histogram (M2) for grayscale image
hist_gray_normalized = hist_gray / hist_gray.sum()

# Display grayscale histogram (M1 & M2)
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.title("Grayscale Histogram (M1)")
plt.xlabel("Intensity Value")
plt.ylabel("Pixel Count")
plt.plot(hist_gray, color='black')

plt.subplot(1, 2, 2)
plt.title("Grayscale Histogram (M2)")
plt.xlabel("Intensity Value")
plt.ylabel("Probability")
plt.plot(hist_gray_normalized, color='black')

plt.show()

# Display color histogram
plt.figure(figsize=(8, 5))
plt.title("Color Image Histogram")
plt.xlabel("Intensity Value")
plt.ylabel("Pixel Count")
for hist, color in zip(hist_colors, channels):
    plt.plot(hist, label=color, color=color)
plt.legend()
plt.show()

# Bright & Dark Images
bright_image = cv2.convertScaleAbs(gray_image, alpha=1.5, beta=50)  # Increase brightness
dark_image = cv2.convertScaleAbs(gray_image, alpha=0.5, beta=-50)   # Decrease brightness

# Compute histograms for bright & dark images
hist_bright = cv2.calcHist([bright_image], [0], None, [256], [0, 256])
hist_dark = cv2.calcHist([dark_image], [0], None, [256], [0, 256])

# Display histograms for bright & dark images
plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
plt.title("Bright Image Histogram")
plt.xlabel("Intensity Value")
plt.ylabel("Pixel Count")
plt.plot(hist_bright, color='yellow')

plt.subplot(1, 2, 2)
plt.title("Dark Image Histogram")
plt.xlabel("Intensity Value")
plt.ylabel("Pixel Count")
plt.plot(hist_dark, color='blue')

plt.show()

# Histogram Equalization for Contrast Enhancement
equalized_image = cv2.equalizeHist(gray_image)
hist_equalized = cv2.calcHist([equalized_image], [0], None, [256], [0, 256])

# Display Equalized Image Histogram
plt.figure(figsize=(6, 5))
plt.title("Equalized Image Histogram")
plt.xlabel("Intensity Value")
plt.ylabel("Pixel Count")
plt.plot(hist_equalized, color='green')
plt.show()

# Show original and processed images using cv2_imshow
print("Original Grayscale Image:")
cv2_imshow(gray_image)

print("Bright Image:")
cv2_imshow(bright_image)

print("Dark Image:")
cv2_imshow(dark_image)

print("Equalized Image:")
cv2_imshow(equalized_image)

import cv2
import numpy as np
import matplotlib.pyplot as plt
from skimage.metrics import structural_similarity as ssim
from scipy.ndimage import rotate

# Load grayscale image
image = cv2.imread('/content/lexus-electrified-sport-concept-3840x2160-8433.jpeg', cv2.IMREAD_GRAYSCALE)

# Compute FFT of the image
dft = np.fft.fft2(image)
dft_shift = np.fft.fftshift(dft)
magnitude_spectrum = 20 * np.log(np.abs(dft_shift) + 1)

# Compute Inverse FFT
idft_shift = np.fft.ifftshift(dft_shift)
reconstructed_image = np.fft.ifft2(idft_shift).real

# Rotate Image by 45 degrees
angle = 45
(h, w) = image.shape
center = (w // 2, h // 2)
rotation_matrix = cv2.getRotationMatrix2D(center, angle, 1.0)
rotated_image = cv2.warpAffine(image, rotation_matrix, (w, h))

# Compute FFT of rotated image
dft_rotated = np.fft.fft2(rotated_image)
dft_shift_rotated = np.fft.fftshift(dft_rotated)
magnitude_spectrum_rotated = 20 * np.log(np.abs(dft_shift_rotated) + 1)



# Display results
plt.figure(figsize=(12, 8))

plt.subplot(2, 3, 1)
plt.imshow(image, cmap='gray')
plt.title('Original Image')

plt.subplot(2, 3, 2)
plt.imshow(magnitude_spectrum, cmap='gray')
plt.title('Magnitude Spectrum')

plt.subplot(2, 3, 3)
plt.imshow(reconstructed_image, cmap='gray')
plt.title('Reconstructed Image')

plt.subplot(2, 3, 4)
plt.imshow(rotated_image, cmap='gray')
plt.title('Rotated Image')

plt.subplot(2, 3, 5)
plt.imshow(magnitude_spectrum_rotated, cmap='gray')
plt.title('FFT of Rotated Image')

plt.show()

